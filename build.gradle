plugins {
    id 'fabric-loom' version '1.8-SNAPSHOT'
    id 'maven-publish'
    id("com.github.johnrengelman.shadow") version "7.1.2"
}

version = project.mod_version
group = project.maven_group


repositories {
    mavenCentral()

    maven {
        name = 'm2'
        url = uri("https://plugins.gradle.org/m2/")
    }
    maven {
        name = 'Sonatype Snapshots'
        url = uri("https://oss.sonatype.org/content/repositories/snapshots/")
    }

    maven {
        name = 'Sonatype 01 Snapshots'
        url = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
    }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    implementation "org.mongodb:mongodb-driver-core:4.10.2"
    implementation "org.mongodb:mongodb-driver-sync:4.10.2"

    compileOnlyApi("io.github.miniplaceholders:miniplaceholders-api:2.2.3")

    modImplementation("net.kyori:adventure-platform-fabric:5.8.0")
    modImplementation("net.kyori:adventure-text-minimessage:4.17.0")
    compileOnly 'net.luckperms:api:5.4'
    implementation("net.kyori:adventure-text-serializer-ansi:4.14.0")
    implementation(fileTree(dir: 'libs', include: ['JDA-5.0.2-withDependencies-no-opus.jar']))
    shadow group: 'net.dv8tion', name: 'JDA', version:'5.0.2'
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

remapJar {
    dependsOn(shadowJar)
    inputFile = tasks.shadowJar.archiveFile
}

shadowJar {
    configurations = [project.configurations.shadow]
    mergeServiceFiles()
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    zip64 true
    exclude 'org/intellij/**'
    exclude 'org/slf4j/**'
    exclude 'org/jetbrains/**'
    exclude 'com/sun/**'
    exclude 'com/google/**'
    exclude 'kotlin/**'
    exclude 'natives/**'
    exclude 'META-INF/**'
    exclude '**/*.txt'
    exclude '**/*.xml'
    exclude '**/*.MF'

//    // Relocate additional MANIFEST.MF files
//    eachFile { details ->
//        if (details.path == 'META-INF/MANIFEST.MF') {
//            details.path = 'META-INF/relocated/' + details.path
//        }
//    }

    // Prevent Minecrafts meta inf from being overwritten by shadow
    relocate('net.dv8tion', 'io.github.adainish.cobblemonupdater.shaded.jda')
    relocate('org.apache', 'io.github.adainish.cobblemonupdater.shaded.apache')
    relocate('tomp2p', 'io.github.adainish.cobblemonupdater.shaded.tomp2p')
    relocate('club.minnced', 'io.github.adainish.cobblemonupdater.shaded.minnced')
    relocate('com.neovisionaries', 'io.github.adainish.cobblemonupdater.shaded.neovisionaries')
    relocate('com.iwebpp', 'io.github.adainish.cobblemonupdater.shaded.iwebpp')
    relocate('com.fasterxml', 'io.github.adainish.cobblemonupdater.shaded.fasterxml')
    relocate('okio', 'io.github.adainish.cobblemonupdater.shaded.okio')
    relocate('gnu', 'io.github.adainish.cobblemonupdater.shaded.gnu')
    relocate('okhttp3', 'io.github.adainish.cobblemonupdater.shaded.okhttp3')

//    relocate 'META-INF/MANIFEST.MF', 'META-INF/relocated/MANIFEST.MF'
//    archiveName = rootProject.name + "-" + rootProject.version + "-shade.jar"

//    manifest {
//        attributes(
//                'Manifest-Version': '1.0',
//                'Fabric-Jar-Type': 'classes',
//                'Fabric-Loom-Mixin-Remap-Type': 'mixin',
//                'Fabric-Gradle-Version': '8.3',
//                'Fabric-Loom-Version': '1.5.8',
//                'Fabric-Mixin-Compile-Extensions-Version': '0.6.0',
//                'Fabric-Minecraft-Version': '1.20.1',
//                'Fabric-Tiny-Remapper-Version': '0.10.0',
//                'Fabric-Loader-Version': '0.15.11',
//                'Fabric-Mixin-Version': '0.13.3+mixin.0.8.5',
//                'Fabric-Mixin-Group': 'net.fabricmc',
//                'Fabric-Mapping-Namespace': 'intermediary'
//        )
//    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}


// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}
